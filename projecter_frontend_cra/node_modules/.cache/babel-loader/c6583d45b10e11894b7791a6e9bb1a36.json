{"ast":null,"code":"import axios from \"axios\";\nimport { toast } from \"react-toastify\";\nimport { CHANGE_PASSWORD } from \"../containers/Constant\";\n\nconst changePasswordAction = credentials => async dispatch => {\n  try {\n    const response = await axios.put(\"http://localhost:3000/user/password/update\", credentials, {\n      headers: {\n        Authorization: `Bearer ${sessionStorage.getItem(\"token\")}`\n      }\n    });\n    await dispatch({\n      type: CHANGE_PASSWORD,\n      payload: response.data\n    });\n\n    if (response.data.status === true) {\n      toast.success(\"Password changed successfully\");\n    }\n  } catch (err) {\n    if (err.response.data.passwordError === true) {\n      toast.error(\"Incorrect current password\");\n    } else if (err.response.data.confirmPasswordError === true) {\n      toast.error(\"Please confirm new password\");\n    }\n  }\n};\n\nexport default changePasswordAction;","map":{"version":3,"names":["axios","toast","CHANGE_PASSWORD","changePasswordAction","credentials","dispatch","response","put","headers","Authorization","sessionStorage","getItem","type","payload","data","status","success","err","passwordError","error","confirmPasswordError"],"sources":["/Users/csuftitan/Downloads/Projecter/projecter_frontend_cra/src/redux/actions/ChangePasswordAction.js"],"sourcesContent":["import axios from \"axios\";\nimport { toast } from \"react-toastify\";\nimport { CHANGE_PASSWORD } from \"../containers/Constant\";\n\nconst changePasswordAction = (credentials) => async (dispatch) => {\n  try {\n    const response = await axios.put(\n      \"http://localhost:3000/user/password/update\",\n      credentials,\n      {\n        headers: { Authorization: `Bearer ${sessionStorage.getItem(\"token\")}` },\n      }\n    );\n\n    await dispatch({ type: CHANGE_PASSWORD, payload: response.data });\n\n    if (response.data.status === true) {\n      toast.success(\"Password changed successfully\");\n    }\n  } catch (err) {\n    if (err.response.data.passwordError === true) {\n      toast.error(\"Incorrect current password\");\n    } else if (err.response.data.confirmPasswordError === true) {\n      toast.error(\"Please confirm new password\");\n    }\n  }\n};\n\nexport default changePasswordAction;\n"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,SAASC,eAAT,QAAgC,wBAAhC;;AAEA,MAAMC,oBAAoB,GAAIC,WAAD,IAAiB,MAAOC,QAAP,IAAoB;EAChE,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMN,KAAK,CAACO,GAAN,CACrB,4CADqB,EAErBH,WAFqB,EAGrB;MACEI,OAAO,EAAE;QAAEC,aAAa,EAAG,UAASC,cAAc,CAACC,OAAf,CAAuB,OAAvB,CAAgC;MAA3D;IADX,CAHqB,CAAvB;IAQA,MAAMN,QAAQ,CAAC;MAAEO,IAAI,EAAEV,eAAR;MAAyBW,OAAO,EAAEP,QAAQ,CAACQ;IAA3C,CAAD,CAAd;;IAEA,IAAIR,QAAQ,CAACQ,IAAT,CAAcC,MAAd,KAAyB,IAA7B,EAAmC;MACjCd,KAAK,CAACe,OAAN,CAAc,+BAAd;IACD;EACF,CAdD,CAcE,OAAOC,GAAP,EAAY;IACZ,IAAIA,GAAG,CAACX,QAAJ,CAAaQ,IAAb,CAAkBI,aAAlB,KAAoC,IAAxC,EAA8C;MAC5CjB,KAAK,CAACkB,KAAN,CAAY,4BAAZ;IACD,CAFD,MAEO,IAAIF,GAAG,CAACX,QAAJ,CAAaQ,IAAb,CAAkBM,oBAAlB,KAA2C,IAA/C,EAAqD;MAC1DnB,KAAK,CAACkB,KAAN,CAAY,6BAAZ;IACD;EACF;AACF,CAtBD;;AAwBA,eAAehB,oBAAf"},"metadata":{},"sourceType":"module"}